source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
length(personAndWeightDF$id_utilisateur)
View(realDatabaseDF)
View(emailsDF)
View(emailsDF)
View(IDandEmailDF)
View(emailsDF)
View(allEmails)
View(responsesDF)
View(personAndWeightDF)
indices <- which(responsesDF$Wingz.Email.Address == personAndWeightDF$email_utilisateur[1])
indices
indices[1]
indices[[1]]
indices1
personAndWeightDF$email_utilisateur[1]
which(responsesDF$Wingz.Email.Address == personAndWeightDF$email_utilisateur[1])
for(i in 1:length(personAndWeightDF$id_utilisateur)){
if(personAndWeightDF$id_utilisateur[i] == 0)
{
indices <- which(responsesDF$Wingz.Email.Address == personAndWeightDF$email_utilisateur[i])
nom <- responsesDF$Last.Name[indices[1]]
prenom <- responsesDF$First.Name[indices[1]]
query <- paste0("select * from utilisateurs where nom like '%",nom,"%' and prenom like '%", prenom,"%' and email_validation is not null")
missingInfoDF <- dbGetQuery(myconn, query)
}
}
library(DBI)
library(RMySQL)
library(xlsx)
#CLEAR ENVIRONMENT AND DISCONNECT PREVIOUS CONNECTIONS EACH TIME SCRIPT IS RAN
rm(list=ls())
lapply(dbListConnections(dbDriver(drv="MySQL")),dbDisconnect)
#CONNECTION TO THE DATABASE
myconn <- dbConnect(RMySQL::MySQL(),dbname="wingz-prod",host="wingz-platform-read001.c8voyumknq5z.us-west-1.rds.amazonaws.com",
username="wingz-read-only", password="4P4v53S256hW7Z2X")
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
View(missingInfoDF)
View(allEmails)
#if driver ID is missing, find it
for(i in 1:length(personAndWeightDF$id_utilisateur)){
if(personAndWeightDF$id_utilisateur[i] == 0)
{
indices <- which(responsesDF$Wingz.Email.Address == personAndWeightDF$email_utilisateur[i])
nom <- responsesDF$Last.Name[indices[1]]
prenom <- responsesDF$First.Name[indices[1]]
query <- paste0("select * from utilisateurs where nom like '%",nom,"%' and prenom like '%", prenom,"%' and email_validation is not null")
missingInfoDF <- dbGetQuery(myconn, query)
personAndWeightDF$email_utilisateur[i] <- missingInfoDF$email[1]
personAndWeightDF$id_utilisateur[i] <- missingInfoDF$id_utilisateur[1]
}
}
View(personAndWeightDF)
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
indices <- which(responsesDF$Wingz.Email.Address == personAndWeightDF$email_utilisateur[1])
nom <- responsesDF$Last.Name[indices[1]]
responsesDF$Last.Name[1]
responsesDF$Last.Name[[1]
responsesDF$Last.Name[[1]]
nom <- responsesDF$Last.Name[indices[1]]
prenom <- responsesDF$First.Name[indices[1]]
query <- paste0("select * from utilisateurs where nom like '%",nom,"%' and prenom like '%", prenom,"%' and email_validation is not null")
missingInfoDF <- dbGetQuery(myconn, query)
View(missingInfoDF)
missingInfoDF$email[1]
personAndWeightDF$email_utilisateur[1]
personAndWeightDF$email_utilisateur[i] <- missingInfoDF$email[1]
personAndWeightDF$email_utilisateur[1] <- missingInfoDF$email[1]
missingInfoDF$email[1][1]
missingInfoDF$email[1][2]
missingInfoDF$email[1]
personAndWeightDF$email_utilisateur[1]
personAndWeightDF$email_utilisateur[1][1]
personAndWeightDF$email_utilisateur[[1]]
personAndWeightDF$email_utilisateur[[1]][1]
personAndWeightDF$email_utilisateur[[1]][2]
personAndWeightDF$email_utilisateur[2]
as.character(personAndWeightDF$email_utilisateur[1]) <- missingInfoDF$email[1]
personAndWeightDF[,"email_utilisateur"] <- sapply(personAndWeightDF[, "email_utilisateur"], as.character)
personAndWeightDF$email_utilisateur[1] <- missingInfoDF$email[1]
personAndWeightDF$id_utilisateur[1] <- missingInfoDF$id_utilisateur[1]
#if driver ID is missing, find it
for(i in 1:length(personAndWeightDF$id_utilisateur)){
if(personAndWeightDF$id_utilisateur[i] == 0)
{
indices <- which(responsesDF$Wingz.Email.Address == personAndWeightDF$email_utilisateur[i])
nom <- responsesDF$Last.Name[indices[1]]
prenom <- responsesDF$First.Name[indices[1]]
query <- paste0("select * from utilisateurs where nom like '%",nom,"%' and prenom like '%", prenom,"%' and email_validation is not null")
missingInfoDF <- dbGetQuery(myconn, query)
personAndWeightDF$email_utilisateur[i] <- missingInfoDF$email[1]
personAndWeightDF$id_utilisateur[i] <- missingInfoDF$id_utilisateur[1]
}
}
#cut off from previous old data
OldResponsesDF <- read.csv("ResponsesOld.csv")
#cut off from previous old data
OldResponsesDF <- read.csv("ResponseOld.csv")
nrow(OldResponsesDF)
#cut off from previous old data
OldResponsesDF <- read.csv("OldResults.csv")
nrow(OldResponsesDF)
OldResponsesDF$email_utilisateur[nrow(OldResponsesDF)]
as.character(OldResponsesDF$email_utilisateur[nrow(OldResponsesDF)]))
as.character(OldResponsesDF$email_utilisateur[nrow(OldResponsesDF)])
which(personAndWeightDF$email_utilisateur == as.character(OldResponsesDF$email_utilisateur[nrow(OldResponsesDF)]))
length(which(personAndWeightDF$email_utilisateur == as.character(OldResponsesDF$email_utilisateur[nrow(OldResponsesDF)])))
indices <- which(personAndWeightDF$email_utilisateur == as.character(OldResponsesDF$email_utilisateur[nrow(OldResponsesDF)]))
length(indices)
indices[length(indices)]
personAndWeightDF <- personAndWeightDF[cutOffIndex+1:,]
personAndWeightDF <- personAndWeightDF[cutOffIndex+1:nrow(personAndWeightDF),]
cutOffIndex <- indices[length(indices)]
personAndWeightDF <- personAndWeightDF[cutOffIndex+1:nrow(personAndWeightDF),]
personAndWeightDF1 <- personAndWeightDF[cutOffIndex+1:nrow(personAndWeightDF),]
View(personAndWeightDF1)
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
View(personAndWeightDF)
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
#cut off from previous old data
OldResponsesDF <- read.csv("OldResults.csv")
indices <- which(personAndWeightDF$email_utilisateur == as.character(OldResponsesDF$email_utilisateur[nrow(OldResponsesDF)]))
cutOffIndex <- indices[length(indices)]
personAndWeightDF1 <- personAndWeightDF[-c(1:980),]
View(personAndWeightDF1)
View(responsesDF)
duplicated(responsesDF)
indices <- duplicated(responsesDF)
indices
which(indices)
responsesDF <- read.csv("ResponsesNew.csv", header=TRUE)
indices <- duplicated(responsesDF)
which(indices)
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
View(personAndWeightDF1)
library(DBI)
library(RMySQL)
library(xlsx)
#CLEAR ENVIRONMENT AND DISCONNECT PREVIOUS CONNECTIONS EACH TIME SCRIPT IS RAN
rm(list=ls())
lapply(dbListConnections(dbDriver(drv="MySQL")),dbDisconnect)
#CONNECTION TO THE DATABASE
myconn <- dbConnect(RMySQL::MySQL(),dbname="wingz-prod",host="wingz-platform-read001.c8voyumknq5z.us-west-1.rds.amazonaws.com",
username="wingz-read-only", password="4P4v53S256hW7Z2X")
#READ IN ALL SURVEY RESPONSES
responsesDF <- read.csv("ResponsesNew.csv", header=TRUE)
#QUERY TO RETRIEVE DATABASE OF DRIVER/ZONE INFORMATION
realDatabaseDF <- dbGetQuery(myconn, "SELECT * FROM utilisateurs_has_zones LIMIT 100")
emailsDF <- dbGetQuery(myconn, "SELECT id_utilisateur, email FROM utilisateurs " )
#GRAB ALL EMAILS
allEmails <- data.frame(responsesDF$Wingz.Email.Address)
#REMOVE DUPLICATES
allEmails <- subset(allEmails, !duplicated(allEmails))
responsesDF <- subset(responsesDF, !duplicated(responsesDF$Wingz.Email.Address))
library(DBI)
library(RMySQL)
library(xlsx)
#CLEAR ENVIRONMENT AND DISCONNECT PREVIOUS CONNECTIONS EACH TIME SCRIPT IS RAN
rm(list=ls())
lapply(dbListConnections(dbDriver(drv="MySQL")),dbDisconnect)
#CONNECTION TO THE DATABASE
myconn <- dbConnect(RMySQL::MySQL(),dbname="wingz-prod",host="wingz-platform-read001.c8voyumknq5z.us-west-1.rds.amazonaws.com",
username="wingz-read-only", password="4P4v53S256hW7Z2X")
#READ IN ALL SURVEY RESPONSES
responsesDF <- read.csv("ResponsesNew.csv", header=TRUE)
View(responsesDF)
duplicate(responsesDF$First.Name)
duplicated(responsesDF$First.Name)
duplicated(responsesDF[,2:3])
which(duplicated(responsesDF[,2:3]))
responsesDF <- read.csv("NewResults.csv", header=TRUE)
duplicated(responsesDF$id_utilisateur)
duplicated(responsesDF$email_utilisateur)
View(responsesDF)
responsesDF <- read.csv("OldResults.csv", header=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(responsesDF)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
indices <- duplicated(responsesDF[,1:2])
indices <- which(duplicated(responsesDF[,1:2]))
indices
which(duplicated(responsesDF$Wingz.Email.Address))
153+29
indices <- which(duplicated(responsesDF[,2:3]))
indices <- which(duplicated(responsesDF$Wingz.Email.Address))
test <- which(responsesDF$First.Name == "Michael")
test[1]
test <- which(responsesDF$First.Name == "Joe")
test <- which(responsesDF$First.Name == "Jesse")
test
test[1]
length(test)
test[length(test)]
!rev(duplicated(rev(responsesDF$First.Name=="Jesse")))
!rev(duplicated(rev(responsesDF)))
!rev(duplicated(rev(responsesDF$Wingz.Email.Address)))
source('C:/WingzSystem/DriverZoneWeight/GenerateTable.R')
